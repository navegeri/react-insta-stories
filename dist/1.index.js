(this.webpackJsonpStories=this.webpackJsonpStories||[]).push([[1],{13:function(e,t,n){"use strict";n.r(t),n.d(t,"Icon",(function(){return Se})),n.d(t,"InlineIcon",(function(){return De})),n.d(t,"_api",(function(){return Pe})),n.d(t,"addAPIProvider",(function(){return H})),n.d(t,"addCollection",(function(){return x})),n.d(t,"addIcon",(function(){return w})),n.d(t,"buildIcon",(function(){return L})),n.d(t,"calculateSize",(function(){return M})),n.d(t,"disableCache",(function(){return Te})),n.d(t,"enableCache",(function(){return Fe})),n.d(t,"getIcon",(function(){return I})),n.d(t,"iconExists",(function(){return j})),n.d(t,"listIcons",(function(){return g})),n.d(t,"loadIcons",(function(){return ve})),n.d(t,"replaceIDs",(function(){return S}));var o=n(0),i=/^[a-z0-9]+(-[a-z0-9]+)*$/,r=Object.freeze({left:0,top:0,width:16,height:16,rotate:0,vFlip:!1,hFlip:!1});function c(e){return{...r,...e}}var s=(e,t,n,o="")=>{const i=e.split(":");if("@"===e.slice(0,1)){if(i.length<2||i.length>3)return null;o=i.shift().slice(1)}if(i.length>3||!i.length)return null;if(i.length>1){const e=i.pop(),n=i.pop(),r={provider:i.length>0?i[0]:o,prefix:n,name:e};return t&&!a(r)?null:r}const r=i[0],c=r.split("-");if(c.length>1){const e={provider:o,prefix:c.shift(),name:c.join("-")};return t&&!a(e)?null:e}if(n&&""===o){const e={provider:o,prefix:"",name:r};return t&&!a(e,n)?null:e}return null},a=(e,t)=>!!e&&!(""!==e.provider&&!e.provider.match(i)||!(t&&""===e.prefix||e.prefix.match(i))||!e.name.match(i));function l(e,t,n=!1){const o=function t(n,o){var i,c,s,a;if(void 0!==e.icons[n])return Object.assign({},e.icons[n]);if(o>5)return null;if(void 0!==(null==(i=e.aliases)?void 0:i[n])){const i=null==(c=e.aliases)?void 0:c[n],s=t(i.parent,o+1);return s?function(e,t){const n={...e};for(const e in r){const o=e;if(void 0!==t[o]){const e=t[o];if(void 0===n[o]){n[o]=e;continue}switch(o){case"rotate":n[o]=(n[o]+e)%4;break;case"hFlip":case"vFlip":n[o]=e!==n[o];break;default:n[o]=e}}}return n}(s,i):s}return 0===o&&void 0!==(null==(s=e.chars)?void 0:s[n])?t(null==(a=e.chars)?void 0:a[n],o+1):null}(t,0);if(o)for(const t in r)void 0===o[t]&&void 0!==e[t]&&(o[t]=e[t]);return o&&n?c(o):o}var f=/^[a-f0-9]+(-[a-f0-9]+)*$/;function u(e,t){for(const n in e){const o=n,i=typeof e[o];if("undefined"!==i)switch(n){case"body":case"parent":if("string"!==i)return n;break;case"hFlip":case"vFlip":case"hidden":if("boolean"!==i){if(!t)return n;delete e[o]}break;case"width":case"height":case"left":case"top":case"rotate":case"inlineHeight":case"inlineTop":case"verticalAlign":if("number"!==i){if(!t)return n;delete e[o]}break;default:if("object"===i){if(!t)return n;delete e[o]}}else delete e[o]}return null}function d(e,t,n){n=n||{};const o=[];if("object"!=typeof e||"object"!=typeof e.icons)return o;const c=n.validate;if(!1!==c)try{!function(e,t){const n=!!(null==t?void 0:t.fix);if("object"!=typeof e||null===e||"object"!=typeof e.icons||!e.icons)throw new Error("Bad icon set");const o=e;if("string"==typeof(null==t?void 0:t.prefix))o.prefix=t.prefix;else if("string"!=typeof o.prefix||!o.prefix.match(i))throw new Error("Invalid prefix");if("string"==typeof(null==t?void 0:t.provider))o.provider=t.provider;else if(void 0!==o.provider){const e=o.provider;if("string"!=typeof e||""!==e&&!e.match(i)){if(!n)throw new Error("Invalid provider");delete o.provider}}const c=o.icons;if(Object.keys(c).forEach(e=>{if(!e.match(i)){if(n)return void delete c[e];throw new Error(`Invalid icon name: "${e}"`)}const t=c[e];if("object"!=typeof t||null===t||"string"!=typeof t.body){if(n)return void delete c[e];throw new Error(`Invalid icon: "${e}"`)}const o="string"==typeof t.parent?"parent":u(t,n);if(null!==o){if(n)return void delete c[e];throw new Error(`Invalid property "${o}" in icon "${e}"`)}}),!Object.keys(o.icons).length)throw new Error("Icon set is empty");if(void 0!==o.aliases&&("object"!=typeof o.aliases||null===o.aliases)){if(!n)throw new Error("Invalid aliases list");delete o.aliases}if("object"==typeof o.aliases){let e=function(s,a){if(r.has(s))return!c.has(s);const l=t[s];if(a>5||"object"!=typeof l||null===l||"string"!=typeof l.parent||!s.match(i)){if(n)return delete t[s],c.add(s),!1;throw new Error(`Invalid icon alias: "${s}"`)}const f=l.parent;if(void 0===o.icons[f]&&(void 0===t[f]||!e(f,a+1))){if(n)return delete t[s],c.add(s),!1;throw new Error('Missing parent icon for alias "'+s)}n&&void 0!==l.body&&delete l.body;const d=void 0!==l.body?"body":u(l,n);if(null!==d){if(n)return delete t[s],c.add(s),!1;throw new Error(`Invalid property "${d}" in alias "${s}"`)}return r.add(s),!0};const t=o.aliases,r=new Set,c=new Set;Object.keys(t).forEach(t=>{e(t,0)}),n&&!Object.keys(o.aliases).length&&delete o.aliases}if(Object.keys(r).forEach(e=>{const t=typeof r[e],n=typeof o[e];if("undefined"!==n&&n!==t)throw new Error(`Invalid value type for "${e}"`)}),void 0!==o.chars&&("object"!=typeof o.chars||null===o.chars)){if(!n)throw new Error("Invalid characters map");delete o.chars}if("object"==typeof o.chars){const e=o.chars;Object.keys(e).forEach(t=>{var i;if(!t.match(f)||"string"!=typeof e[t]){if(n)return void delete e[t];throw new Error(`Invalid character "${t}"`)}const r=e[t];if(void 0===o.icons[r]&&void 0===(null==(i=o.aliases)?void 0:i[r])){if(n)return void delete e[t];throw new Error(`Character "${t}" points to missing icon "${r}"`)}}),n&&!Object.keys(o.chars).length&&delete o.chars}}(e,"object"==typeof c?c:{fix:!0})}catch(e){return o}e.not_found instanceof Array&&e.not_found.forEach(e=>{t(e,null),o.push(e)});const s=e.icons;Object.keys(s).forEach(n=>{const i=l(e,n,!0);i&&(t(n,i),o.push(n))});const a=n.aliases||"all";if("none"!==a&&"object"==typeof e.aliases){const n=e.aliases;Object.keys(n).forEach(i=>{if("variations"===a&&function(e){for(const t in r)if(void 0!==e[t])return!0;return!1}(n[i]))return;const c=l(e,i,!0);c&&(t(i,c),o.push(i))})}return o}var p=Object.create(null);function h(e,t){void 0===p[e]&&(p[e]=Object.create(null));const n=p[e];return void 0===n[t]&&(n[t]=function(e,t){return{provider:e,prefix:t,icons:Object.create(null),missing:Object.create(null)}}(e,t)),n[t]}function v(e,t){const n=Date.now();return d(t,(t,o)=>{o?e.icons[t]=o:e.missing[t]=n})}function g(e,t){let n,o=[];return n="string"==typeof e?[e]:Object.keys(p),n.forEach(e=>{let n;n="string"==typeof e&&"string"==typeof t?[t]:void 0===p[e]?[]:Object.keys(p[e]),n.forEach(t=>{const n=h(e,t),i=Object.keys(n.icons).map(n=>(""!==e?"@"+e+":":"")+t+":"+n);o=o.concat(i)})}),o}var y=!1;function b(e){return"boolean"==typeof e&&(y=e),y}function m(e){const t="string"==typeof e?s(e,!0,y):e;return t?function(e,t){const n=e.icons[t];return void 0===n?null:n}(h(t.provider,t.prefix),t.name):null}function w(e,t){const n=s(e,!0,y);if(!n)return!1;return function(e,t,n){try{if("string"==typeof n.body)return e.icons[t]=Object.freeze(c(n)),!0}catch(e){}return!1}(h(n.provider,n.prefix),n.name,t)}function x(e,t){if("object"!=typeof e)return!1;if("string"!=typeof t&&(t="string"==typeof e.provider?e.provider:""),y&&""===t&&("string"!=typeof e.prefix||""===e.prefix)){let t=!1;return d(e,(e,n)=>{n&&w(e,n)&&(t=!0)},{validate:{fix:!0,prefix:""}}),t}if("string"!=typeof e.prefix||!a({provider:t,prefix:e.prefix,name:"a"}))return!1;return!!v(h(t,e.prefix),e)}function j(e){return null!==m(e)}function I(e){const t=m(e);return t?{...t}:null}var k=Object.freeze({inline:!1,width:null,height:null,hAlign:"center",vAlign:"middle",slice:!1,hFlip:!1,vFlip:!1,rotate:0});function E(e,t){const n={};for(const o in e){const i=o;if(n[i]=e[i],void 0===t[i])continue;const r=t[i];switch(i){case"inline":case"slice":"boolean"==typeof r&&(n[i]=r);break;case"hFlip":case"vFlip":!0===r&&(n[i]=!n[i]);break;case"hAlign":case"vAlign":"string"==typeof r&&""!==r&&(n[i]=r);break;case"width":case"height":("string"==typeof r&&""!==r||"number"==typeof r&&r||null===r)&&(n[i]=r);break;case"rotate":"number"==typeof r&&(n[i]+=r)}}return n}var O=/(-?[0-9.]*[0-9]+[0-9.]*)/g,_=/^-?[0-9.]*[0-9]+[0-9.]*$/g;function M(e,t,n){if(1===t)return e;if(n=void 0===n?100:n,"number"==typeof e)return Math.ceil(e*t*n)/n;if("string"!=typeof e)return e;const o=e.split(O);if(null===o||!o.length)return e;const i=[];let r=o.shift(),c=_.test(r);for(;;){if(c){const e=parseFloat(r);isNaN(e)?i.push(r):i.push(Math.ceil(e*t*n)/n)}else i.push(r);if(r=o.shift(),void 0===r)return i.join("");c=!c}}function A(e){let t="";switch(e.hAlign){case"left":t+="xMin";break;case"right":t+="xMax";break;default:t+="xMid"}switch(e.vAlign){case"top":t+="YMin";break;case"bottom":t+="YMax";break;default:t+="YMid"}return t+=e.slice?" slice":" meet",t}function C(e,t){const n={left:e.left,top:e.top,width:e.width,height:e.height};let o,i,r=e.body;[e,t].forEach(e=>{const t=[],o=e.hFlip,i=e.vFlip;let c,s=e.rotate;switch(o?i?s+=2:(t.push("translate("+(n.width+n.left)+" "+(0-n.top)+")"),t.push("scale(-1 1)"),n.top=n.left=0):i&&(t.push("translate("+(0-n.left)+" "+(n.height+n.top)+")"),t.push("scale(1 -1)"),n.top=n.left=0),s<0&&(s-=4*Math.floor(s/4)),s%=4,s){case 1:c=n.height/2+n.top,t.unshift("rotate(90 "+c+" "+c+")");break;case 2:t.unshift("rotate(180 "+(n.width/2+n.left)+" "+(n.height/2+n.top)+")");break;case 3:c=n.width/2+n.left,t.unshift("rotate(-90 "+c+" "+c+")")}s%2==1&&(0===n.left&&0===n.top||(c=n.left,n.left=n.top,n.top=c),n.width!==n.height&&(c=n.width,n.width=n.height,n.height=c)),t.length&&(r='<g transform="'+t.join(" ")+'">'+r+"</g>")}),null===t.width&&null===t.height?(i="1em",o=M(i,n.width/n.height)):null!==t.width&&null!==t.height?(o=t.width,i=t.height):null!==t.height?(i=t.height,o=M(i,n.width/n.height)):(o=t.width,i=M(o,n.height/n.width)),"auto"===o&&(o=n.width),"auto"===i&&(i=n.height),o="string"==typeof o?o:o+"",i="string"==typeof i?i:i+"";const c={attributes:{width:o,height:i,preserveAspectRatio:A(t),viewBox:n.left+" "+n.top+" "+n.width+" "+n.height},body:r};return t.inline&&(c.inline=!0),c}function L(e,t){return C(c(e),t?E(k,t):k)}var F=/\sid="(\S+)"/g,T="IconifyId-"+Date.now().toString(16)+"-"+(16777216*Math.random()|0).toString(16)+"-",$=0;function S(e,t=T){const n=[];let o;for(;o=F.exec(e);)n.push(o[1]);return n.length?(n.forEach(n=>{const o="function"==typeof t?t(n):t+$++,i=n.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");e=e.replace(new RegExp('([#;"])('+i+')([")]|\\.[a-z])',"g"),"$1"+o+"$3")}),e):e}var D=Object.create(null);function P(e,t){D[e]=t}function z(e){return D[e]||D[""]}function R(e){let t;if("string"==typeof e.resources)t=[e.resources];else if(t=e.resources,!(t instanceof Array&&t.length))return null;return{resources:t,path:void 0===e.path?"/":e.path,maxURL:e.maxURL?e.maxURL:500,rotate:e.rotate?e.rotate:750,timeout:e.timeout?e.timeout:5e3,random:!0===e.random,index:e.index?e.index:0,dataAfterTimeout:!1!==e.dataAfterTimeout}}for(var N=Object.create(null),U=["https://api.simplesvg.com","https://api.unisvg.com"],q=[];U.length>0;)1===U.length||Math.random()>.5?q.push(U.shift()):q.push(U.pop());function H(e,t){const n=R(t);return null!==n&&(N[e]=n,!0)}function J(e){return N[e]}N[""]=R({resources:["https://api.iconify.design"].concat(q)});var Y=(e,t)=>{let n=e,o=-1!==n.indexOf("?");return Object.keys(t).forEach(e=>{let i;try{i=function(e){switch(typeof e){case"boolean":return e?"true":"false";case"number":case"string":return encodeURIComponent(e);default:throw new Error("Invalid parameter")}}(t[e])}catch(e){return}n+=(o?"&":"?")+encodeURIComponent(e)+"="+i,o=!0}),n},B=Object.create(null),Q=Object.create(null),V=(()=>{let e;try{if(e=fetch,"function"==typeof e)return e}catch(e){}try{const t=String.fromCharCode(114)+String.fromCharCode(101);if(e=(0,global[t+"qui"+t])("cross-fetch"),"function"==typeof e)return e}catch(e){}return null})();var W={prepare:(e,t,n)=>{const o=[];let i=B[t];void 0===i&&(i=function(e,t){const n=J(e);if(!n)return 0;let o;if(n.maxURL){let e=0;n.resources.forEach(t=>{const n=t;e=Math.max(e,n.length)});const i=Y(t+".json",{icons:""});o=n.maxURL-e-n.path.length-i.length}else o=0;const i=e+":"+t;return Q[e]=n.path,B[i]=o,o}(e,t));let r={type:"icons",provider:e,prefix:t,icons:[]},c=0;return n.forEach((n,s)=>{c+=n.length+1,c>=i&&s>0&&(o.push(r),r={type:"icons",provider:e,prefix:t,icons:[]},c=n.length),r.icons.push(n)}),o.push(r),o},send:(e,t,n)=>{if(!V)return void n.done(void 0,424);let o=function(e){if("string"==typeof e){if(void 0===Q[e]){const t=J(e);if(!t)return"/";Q[e]=t.path}return Q[e]}return"/"}(t.provider);switch(t.type){case"icons":{const e=t.prefix,n=t.icons.join(",");o+=Y(e+".json",{icons:n});break}case"custom":{const e=t.uri;o+="/"===e.slice(0,1)?e.slice(1):e;break}default:return void n.done(void 0,400)}let i=503;V(e+o).then(e=>{if(200===e.status)return i=501,e.json();setTimeout(()=>{n.done(void 0,e.status)})}).then(e=>{"object"==typeof e&&null!==e?setTimeout(()=>{n.done(e)}):setTimeout(()=>{n.done(void 0,i)})}).catch(()=>{n.done(void 0,i)})}};var X=Object.create(null),G=Object.create(null);function K(e,t){e.forEach(e=>{const n=e.provider;if(void 0===X[n])return;const o=X[n],i=e.prefix,r=o[i];r&&(o[i]=r.filter(e=>e.id!==t))})}var Z=0;var ee={resources:[],index:0,timeout:2e3,rotate:750,random:!1,dataAfterTimeout:!1};function te(e,t,n,o,i){const r=e.resources.length,c=e.random?Math.floor(Math.random()*r):e.index;let s;if(e.random){let t=e.resources.slice(0);for(s=[];t.length>1;){const e=Math.floor(Math.random()*t.length);s.push(t[e]),t=t.slice(0,e).concat(t.slice(e+1))}s=s.concat(t)}else s=e.resources.slice(c).concat(e.resources.slice(0,c));const a=Date.now();let l="pending",f=0,u=void 0,d=null,p=[],h=[];function v(){d&&(clearTimeout(d),d=null)}function g(){"pending"===l&&(l="aborted"),v(),p.forEach(e=>{e.abort&&e.abort(),"pending"===e.status&&(e.status="aborted")}),p=[]}function y(e,t){t&&(h=[]),"function"==typeof e&&h.push(e)}function b(){return{startTime:a,payload:t,status:l,queriesSent:f,queriesPending:p.length,subscribe:y,abort:g}}function m(){l="failed",h.forEach(e=>{e(void 0,u)})}function w(){p=p.filter(e=>("pending"===e.status&&(e.status="aborted"),e.abort&&e.abort(),!1))}function x(){if("pending"!==l)return;v();const o=s.shift();if(void 0===o){if(p.length){const t="function"==typeof e.timeout?e.timeout(a):e.timeout;if(t)return void(d=setTimeout(()=>{v(),"pending"===l&&(w(),m())},t))}return void m()}const r={getQueryStatus:b,status:"pending",resource:o,done:(t,n)=>{!function(t,n,o){const r=void 0===n;switch(p=p.filter(e=>e!==t),l){case"pending":break;case"failed":if(r||!e.dataAfterTimeout)return;break;default:return}if(r)return void 0!==o&&(u=o),void(p.length||(s.length?x():m()));if(v(),w(),i&&!e.random){const n=e.resources.indexOf(t.resource);-1!==n&&n!==e.index&&i(n)}l="completed",h.forEach(e=>{e(n)})}(r,t,n)}};p.push(r),f++;const c="function"==typeof e.rotate?e.rotate(f,a):e.rotate;d=setTimeout(x,c),n(o,t,r)}return"function"==typeof o&&h.push(o),setTimeout(x),b}function ne(e){const t=function(e){if(!("object"==typeof e&&"object"==typeof e.resources&&e.resources instanceof Array&&e.resources.length))throw new Error("Invalid Reduncancy configuration");const t=Object.create(null);let n;for(n in ee)void 0!==e[n]?t[n]=e[n]:t[n]=ee[n];return t}(e);let n=[];function o(){n=n.filter(e=>"pending"===e().status)}return{query:function(e,i,r){const c=te(t,e,i,(e,t)=>{o(),r&&r(e,t)},e=>{t.index=e});return n.push(c),c},find:function(e){const t=n.find(t=>e(t));return void 0!==t?t:null},setIndex:e=>{t.index=e},getIndex:()=>t.index,cleanup:o}}function oe(){}var ie=Object.create(null);function re(e,t,n){let o,i;if("string"==typeof e){const t=z(e);if(!t)return n(void 0,424),oe;i=t.send;const r=function(e){if(void 0===ie[e]){const t=J(e);if(!t)return;const n={config:t,redundancy:ne(t)};ie[e]=n}return ie[e]}(e);r&&(o=r.redundancy)}else{const t=R(e);if(t){o=ne(t);const n=z(e.resources?e.resources[0]:"");n&&(i=n.send)}}return o&&i?o.query(t,i,n)().abort:(n(void 0,424),oe)}var ce={};function se(){}var ae=Object.create(null),le=Object.create(null),fe=Object.create(null),ue=Object.create(null);function de(e,t){void 0===fe[e]&&(fe[e]=Object.create(null));const n=fe[e];n[t]||(n[t]=!0,setTimeout(()=>{n[t]=!1,function(e,t){void 0===G[e]&&(G[e]=Object.create(null));const n=G[e];n[t]||(n[t]=!0,setTimeout(()=>{if(n[t]=!1,void 0===X[e]||void 0===X[e][t])return;const o=X[e][t].slice(0);if(!o.length)return;const i=h(e,t);let r=!1;o.forEach(n=>{const o=n.icons,c=o.pending.length;o.pending=o.pending.filter(n=>{if(n.prefix!==t)return!0;const c=n.name;if(void 0!==i.icons[c])o.loaded.push({provider:e,prefix:t,name:c});else{if(void 0===i.missing[c])return r=!0,!0;o.missing.push({provider:e,prefix:t,name:c})}return!1}),o.pending.length!==c&&(r||K([{provider:e,prefix:t}],n.id),n.callback(o.loaded.slice(0),o.missing.slice(0),o.pending.slice(0),n.abort))})}))}(e,t)}))}var pe=Object.create(null);function he(e,t,n){void 0===le[e]&&(le[e]=Object.create(null));const o=le[e];void 0===ue[e]&&(ue[e]=Object.create(null));const i=ue[e];void 0===ae[e]&&(ae[e]=Object.create(null));const r=ae[e];void 0===o[t]?o[t]=n:o[t]=o[t].concat(n).sort(),i[t]||(i[t]=!0,setTimeout(()=>{i[t]=!1;const n=o[t];delete o[t];const c=z(e);if(!c)return void function(){const n=(""===e?"":"@"+e+":")+t,o=Math.floor(Date.now()/6e4);pe[n]<o&&(pe[n]=o,console.error('Unable to retrieve icons for "'+n+'" because API is not configured properly.'))}();c.prepare(e,t,n).forEach(n=>{re(e,n,(o,i)=>{const c=h(e,t);if("object"!=typeof o){if(404!==i)return;const e=Date.now();n.icons.forEach(t=>{c.missing[t]=e})}else try{const n=v(c,o);if(!n.length)return;const i=r[t];n.forEach(e=>{delete i[e]}),ce.store&&ce.store(e,o)}catch(e){console.error(e)}de(e,t)})})}))}var ve=(e,t)=>{const n=function(e){const t={loaded:[],missing:[],pending:[]},n=Object.create(null);e.sort((e,t)=>e.provider!==t.provider?e.provider.localeCompare(t.provider):e.prefix!==t.prefix?e.prefix.localeCompare(t.prefix):e.name.localeCompare(t.name));let o={provider:"",prefix:"",name:""};return e.forEach(e=>{if(o.name===e.name&&o.prefix===e.prefix&&o.provider===e.provider)return;o=e;const i=e.provider,r=e.prefix,c=e.name;void 0===n[i]&&(n[i]=Object.create(null));const s=n[i];void 0===s[r]&&(s[r]=h(i,r));const a=s[r];let l;l=void 0!==a.icons[c]?t.loaded:""===r||void 0!==a.missing[c]?t.missing:t.pending;const f={provider:i,prefix:r,name:c};l.push(f)}),t}(function(e,t=!0,n=!1){const o=[];return e.forEach(e=>{const i="string"==typeof e?s(e,!1,n):e;t&&!a(i,n)||o.push({provider:i.provider,prefix:i.prefix,name:i.name})}),o}(e,!0,b()));if(!n.pending.length){let e=!0;return t&&setTimeout(()=>{e&&t(n.loaded,n.missing,n.pending,se)}),()=>{e=!1}}const o=Object.create(null),i=[];let r,c;n.pending.forEach(e=>{const t=e.provider,n=e.prefix;if(n===c&&t===r)return;r=t,c=n,i.push({provider:t,prefix:n}),void 0===ae[t]&&(ae[t]=Object.create(null));const s=ae[t];void 0===s[n]&&(s[n]=Object.create(null)),void 0===o[t]&&(o[t]=Object.create(null));const a=o[t];void 0===a[n]&&(a[n]=[])});const l=Date.now();return n.pending.forEach(e=>{const t=e.provider,n=e.prefix,i=e.name,r=ae[t][n];void 0===r[i]&&(r[i]=l,o[t][n].push(i))}),i.forEach(e=>{const t=e.provider,n=e.prefix;o[t][n].length&&he(t,n,o[t][n])}),t?function(e,t,n){const o=Z++,i=K.bind(null,n,o);if(!t.pending.length)return i;const r={id:o,icons:t,callback:e,abort:i};return n.forEach(e=>{const t=e.provider,n=e.prefix;void 0===X[t]&&(X[t]=Object.create(null));const o=X[t];void 0===o[n]&&(o[n]=[]),o[n].push(r)}),i}(t,n,i):se},ge={local:!0,session:!0},ye=!1,be={local:0,session:0},me={local:[],session:[]},we="undefined"==typeof window?{}:window;function xe(e){const t=e+"Storage";try{if(we&&we[t]&&"number"==typeof we[t].length)return we[t]}catch(e){}return ge[e]=!1,null}function je(e,t,n){try{return e.setItem("iconify-count",n+""),be[t]=n,!0}catch(e){return!1}}function Ie(e){const t=e.getItem("iconify-count");if(t){const e=parseInt(t);return e||0}return 0}var ke=()=>{if(ye)return;ye=!0;const e=Math.floor(Date.now()/36e5)-168;function t(t){const n=xe(t);if(!n)return;const o=t=>{const o="iconify"+t,i=n.getItem(o);if("string"!=typeof i)return!1;let r=!0;try{const t=JSON.parse(i);if("object"!=typeof t||"number"!=typeof t.cached||t.cached<e||"string"!=typeof t.provider||"object"!=typeof t.data||"string"!=typeof t.data.prefix)r=!1;else{const e=t.provider,n=t.data.prefix;r=v(h(e,n),t.data).length>0}}catch(e){r=!1}return r||n.removeItem(o),r};try{const e=n.getItem("iconify-version");if("iconify2"!==e)return e&&function(e){try{const t=Ie(e);for(let n=0;n<t;n++)e.removeItem("iconify"+n)}catch(e){}}(n),void function(e,t){try{e.setItem("iconify-version","iconify2")}catch(e){}je(e,t,0)}(n,t);let i=Ie(n);for(let e=i-1;e>=0;e--)o(e)||(e===i-1?i--:me[t].push(e));je(n,t,i)}catch(e){}}for(const e in ge)t(e)};function Ee(e,t){switch(e){case"local":case"session":ge[e]=t;break;case"all":for(const e in ge)ge[e]=t}}var Oe=/[\s,]+/;function _e(e,t){t.split(Oe).forEach(t=>{switch(t.trim()){case"horizontal":e.hFlip=!0;break;case"vertical":e.vFlip=!0}})}function Me(e,t){t.split(Oe).forEach(t=>{const n=t.trim();switch(n){case"left":case"center":case"right":e.hAlign=n;break;case"top":case"middle":case"bottom":e.vAlign=n;break;case"slice":case"crop":e.slice=!0;break;case"meet":e.slice=!1}})}function Ae(e,t=0){const n=e.replace(/^-?[0-9.]*/,"");function o(e){for(;e<0;)e+=4;return e%4}if(""===n){const t=parseInt(e);return isNaN(t)?0:o(t)}if(n!==e){let t=0;switch(n){case"%":t=25;break;case"deg":t=90}if(t){let i=parseFloat(e.slice(0,e.length-n.length));return isNaN(i)?0:(i/=t,i%1==0?o(i):0)}}return t}const Ce={xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink","aria-hidden":!0,role:"img",style:{}},Le={...k,inline:!0};function Fe(e){Ee(e,!0)}function Te(e){Ee(e,!1)}if(b(!0),P("",W),"undefined"!=typeof document&&"undefined"!=typeof window){ce.store=(e,t)=>{function n(n){if(!ge[n])return!1;const o=xe(n);if(!o)return!1;let i=me[n].shift();if(void 0===i&&(i=be[n],!je(o,n,i+1)))return!1;try{const n={cached:Math.floor(Date.now()/36e5),provider:e,data:t};o.setItem("iconify"+i,JSON.stringify(n))}catch(e){return!1}return!0}ye||ke(),n("local")||n("session")},ke();const e=window;if(void 0!==e.IconifyPreload){const t=e.IconifyPreload,n="Invalid IconifyPreload syntax.";"object"==typeof t&&null!==t&&(t instanceof Array?t:[t]).forEach(e=>{try{("object"!=typeof e||null===e||e instanceof Array||"object"!=typeof e.icons||"string"!=typeof e.prefix||!x(e))&&console.error(n)}catch(e){console.error(n)}})}if(void 0!==e.IconifyProviders){const t=e.IconifyProviders;if("object"==typeof t&&null!==t)for(let e in t){const n="IconifyProviders["+e+"] is invalid.";try{const o=t[e];if("object"!=typeof o||!o||void 0===o.resources)continue;H(e,o)||console.error(n)}catch(e){console.error(n)}}}}class $e extends o.Component{constructor(e){super(e),this.state={icon:null}}_abortLoading(){this._loading&&(this._loading.abort(),this._loading=null)}_setData(e){this.state.icon!==e&&this.setState({icon:e})}_checkIcon(e){const t=this.state,n=this.props.icon;if("object"==typeof n&&null!==n&&"string"==typeof n.body)return this._icon="",this._abortLoading(),void((e||null===t.icon)&&this._setData({data:c(n)}));let o;if("string"!=typeof n||null===(o=s(n,!1,!0)))return this._abortLoading(),void this._setData(null);const i=m(o);if(null!==i){if(this._icon!==n||null===t.icon){this._abortLoading(),this._icon=n;const e=["iconify"];""!==o.prefix&&e.push("iconify--"+o.prefix),""!==o.provider&&e.push("iconify--"+o.provider),this._setData({data:i,classes:e}),this.props.onLoad&&this.props.onLoad(n)}}else this._loading&&this._loading.name===n||(this._abortLoading(),this._icon="",this._setData(null),this._loading={name:n,abort:ve([o],this._checkIcon.bind(this,!1))})}componentDidMount(){this._checkIcon(!1)}componentDidUpdate(e){e.icon!==this.props.icon&&this._checkIcon(!0)}componentWillUnmount(){this._abortLoading()}render(){const e=this.props,t=this.state.icon;if(null===t)return e.children?e.children:o.createElement("span",{});let n=e;return t.classes&&(n={...e,className:("string"==typeof e.className?e.className+" ":"")+t.classes.join(" ")}),((e,t,n,i)=>{const r=n?Le:k,c=E(r,t),s="object"==typeof t.style&&null!==t.style?t.style:{},a={...Ce,ref:i,style:s};for(let e in t){const n=t[e];if(void 0!==n)switch(e){case"icon":case"style":case"children":case"onLoad":case"_ref":case"_inline":break;case"inline":case"hFlip":case"vFlip":c[e]=!0===n||"true"===n||1===n;break;case"flip":"string"==typeof n&&_e(c,n);break;case"align":"string"==typeof n&&Me(c,n);break;case"color":s.color=n;break;case"rotate":"string"==typeof n?c[e]=Ae(n):"number"==typeof n&&(c[e]=n);break;case"ariaHidden":case"aria-hidden":!0!==n&&"true"!==n&&delete a["aria-hidden"];break;default:void 0===r[e]&&(a[e]=n)}}const l=C(e,c);let f=0;const u=t.id;a.dangerouslySetInnerHTML={__html:S(l.body,u?()=>u+"-"+f++:"iconify-react-")};for(let e in l.attributes)a[e]=l.attributes[e];return l.inline&&void 0===s.verticalAlign&&(s.verticalAlign="-0.125em"),o.createElement("svg",a)})(t.data,n,e._inline,e._ref)}}const Se=o.forwardRef((function(e,t){const n={...e,_ref:t,_inline:!1};return o.createElement($e,n)})),De=o.forwardRef((function(e,t){const n={...e,_ref:t,_inline:!0};return o.createElement($e,n)})),Pe={getAPIConfig:J,setAPIModule:P,sendAPIQuery:re,setFetch:function(e){V=e},listAPIProviders:function(){return Object.keys(N)},mergeParams:Y}},14:function(e,t){t.__esModule=!0,t.default={body:'<path class="clr-i-solid clr-i-solid-path-1" d="M23.41 25.25a1 1 0 0 1-.54-1.85a6.21 6.21 0 0 0-.19-10.65a1 1 0 1 1 1-1.73a8.21 8.21 0 0 1 .24 14.06a1 1 0 0 1-.51.17z" fill="currentColor"/><path class="clr-i-solid clr-i-solid-path-2" d="M25.62 31.18a1 1 0 0 1-.45-1.89A12.44 12.44 0 0 0 25 6.89a1 1 0 1 1 .87-1.8a14.44 14.44 0 0 1 .24 26a1 1 0 0 1-.49.09z" fill="currentColor"/><path class="clr-i-solid clr-i-solid-path-3" d="M18.33 4l-9.26 8h-6a1 1 0 0 0-1 1v9.92a1 1 0 0 0 1 1h5.81l9.46 8.24a1 1 0 0 0 1.66-.73V4.72A1 1 0 0 0 18.33 4z" fill="currentColor"/>',width:36,height:36}},15:function(e,t){t.__esModule=!0,t.default={body:'<path class="clr-i-solid clr-i-solid-path-1" d="M24.87 6.69a12.42 12.42 0 0 1 3.88 19.61l1.42 1.42a14.43 14.43 0 0 0-4.43-22.84a1 1 0 0 0-.87 1.8z" fill="currentColor"/><path class="clr-i-solid clr-i-solid-path-2" d="M27.3 27.67l-3.84-3.84l-.57-.57L4.63 5L3.21 6.41L8.8 12H3a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h5.83l9.51 8.3a1 1 0 0 0 1.66-.75V23.2l5.59 5.59c-.17.1-.34.2-.51.29a1 1 0 0 0 .9 1.79c.37-.19.72-.4 1.08-.62l2.14 2.14L30.61 31l-3.25-3.25z" fill="currentColor"/><path class="clr-i-solid clr-i-solid-path-3" d="M22.69 12.62A6.27 6.27 0 0 1 25.8 18a6.17 6.17 0 0 1-1.42 3.92l1.42 1.42a8.16 8.16 0 0 0 2-5.34a8.28 8.28 0 0 0-4.1-7.11a1 1 0 1 0-1 1.73z" fill="currentColor"/><path class="clr-i-solid clr-i-solid-path-4" d="M20 4.62a1 1 0 0 0-1.66-.75l-6.42 5.6L20 17.54z" fill="currentColor"/>',width:36,height:36}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,